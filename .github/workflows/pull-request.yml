name: Pull Request
on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
permissions: write-all

jobs:
  build-and-test:
    name: ðŸ§¬ Run tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout  
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Build
      run: dotnet build --configuration Release
    - name: Test
      run: dotnet test --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory ./test-output || true
    - uses: actions/upload-artifact@v3
      with:
        name: test-output
        path: ./test-output

  report-test-results:
    name: ðŸª² Generate Test Report
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: test-output
        path: ./test-output
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Report
        path: "**/test-results.trx"                            
        reporter: dotnet-trx
        fail-on-error: false

  report-test-coverage:
    name: ðŸ“Š Generate Code Coverage Report
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: test-output
        path: ./test-output
    - name: Copy Coverage To Predictable Location
      run: cp test-output/**/coverage.cobertura.xml coverage.xml
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
    - name: Get source branch name
      uses: mdecoleman/pr-branch-name@1.2.0
      id: vars
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}        
    - name: Create Coverage Report Check
      if: always()
      uses: LouisBrunner/checks-action@v1.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Coverage Report
        conclusion: ${{ job.status }}
        output: "{\"summary\":\"Code Coverage Report\"}"
        details_url: https://emyklebost.github.io/DemoApp/branches/${{ steps.vars.outputs.branch }}/coveragereport/
        output_text_description_file: code-coverage-results.md
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
      if: always()
      with:
        reports: 'coverage.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummary' 
      # Publishes the HTML page to a seperate branch in order to host it using GitHub-Pages.
      # This will overwrite the currently published HTML page.
    - name: Deploy to GitHub-Pages
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: coveragereport
        destination_dir: branches/${{ steps.vars.outputs.branch }}/coveragereport
        commit_message: '${{ steps.vars.outputs.branch }}: ${{ github.event.head_commit.message }}'